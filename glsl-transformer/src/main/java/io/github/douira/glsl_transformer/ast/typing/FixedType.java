package io.github.douira.glsl_transformer.ast.typing;

import org.antlr.v4.runtime.Token;

import io.github.douira.glsl_transformer.GLSLLexer;
import io.github.douira.glsl_transformer.ast.data.*;

public enum FixedType implements TokenTyped {
  VOID(GLSLLexer.VOID, TypeKind.VOID),
  ATOMIC_UINT(GLSLLexer.ATOMIC_UINT, TypeKind.ATOMIC_UINT),
  SAMPLER2D(GLSLLexer.SAMPLER2D, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER3D(GLSLLexer.SAMPLER3D, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLERCUBE(GLSLLexer.SAMPLERCUBE, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER2DSHADOW(GLSLLexer.SAMPLER2DSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLERCUBESHADOW(GLSLLexer.SAMPLERCUBESHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER2DARRAY(GLSLLexer.SAMPLER2DARRAY, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER2DARRAYSHADOW(GLSLLexer.SAMPLER2DARRAYSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLERCUBEARRAY(GLSLLexer.SAMPLERCUBEARRAY, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLERCUBEARRAYSHADOW(GLSLLexer.SAMPLERCUBEARRAYSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLER2D(GLSLLexer.ISAMPLER2D, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  ISAMPLER3D(GLSLLexer.ISAMPLER3D, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  ISAMPLERCUBE(GLSLLexer.ISAMPLERCUBE, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  ISAMPLER2DARRAY(GLSLLexer.ISAMPLER2DARRAY, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  ISAMPLERCUBEARRAY(GLSLLexer.ISAMPLERCUBEARRAY, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLER2D(GLSLLexer.USAMPLER2D, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  USAMPLER3D(GLSLLexer.USAMPLER3D, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  USAMPLERCUBE(GLSLLexer.USAMPLERCUBE, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  USAMPLER2DARRAY(GLSLLexer.USAMPLER2DARRAY, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  USAMPLERCUBEARRAY(GLSLLexer.USAMPLERCUBEARRAY, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  SAMPLER1D(GLSLLexer.SAMPLER1D, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER1DSHADOW(GLSLLexer.SAMPLER1DSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER1DARRAY(GLSLLexer.SAMPLER1DARRAY, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER1DARRAYSHADOW(GLSLLexer.SAMPLER1DARRAYSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLER1D(GLSLLexer.ISAMPLER1D, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  ISAMPLER1DARRAY(GLSLLexer.ISAMPLER1DARRAY, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLER1D(GLSLLexer.USAMPLER1D, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  USAMPLER1DARRAY(GLSLLexer.USAMPLER1DARRAY, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  SAMPLER2DRECT(GLSLLexer.SAMPLER2DRECT, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  SAMPLER2DRECTSHADOW(GLSLLexer.SAMPLER2DRECTSHADOW, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLER2DRECT(GLSLLexer.ISAMPLER2DRECT, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLER2DRECT(GLSLLexer.USAMPLER2DRECT, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  SAMPLERBUFFER(GLSLLexer.SAMPLERBUFFER, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLERBUFFER(GLSLLexer.ISAMPLERBUFFER, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLERBUFFER(GLSLLexer.USAMPLERBUFFER, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  SAMPLER2DMS(GLSLLexer.SAMPLER2DMS, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLER2DMS(GLSLLexer.ISAMPLER2DMS, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLER2DMS(GLSLLexer.USAMPLER2DMS, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  SAMPLER2DMSARRAY(GLSLLexer.SAMPLER2DMSARRAY, TypeKind.SAMPLER, NumberType.FLOATING_POINT),
  ISAMPLER2DMSARRAY(GLSLLexer.ISAMPLER2DMSARRAY, TypeKind.SAMPLER, NumberType.SIGNED_INTEGER),
  USAMPLER2DMSARRAY(GLSLLexer.USAMPLER2DMSARRAY, TypeKind.SAMPLER, NumberType.UNSIGNED_INTEGER),
  IMAGE2D(GLSLLexer.IMAGE2D, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE2D(GLSLLexer.IIMAGE2D, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE2D(GLSLLexer.UIMAGE2D, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE3D(GLSLLexer.IMAGE3D, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE3D(GLSLLexer.IIMAGE3D, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE3D(GLSLLexer.UIMAGE3D, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGECUBE(GLSLLexer.IMAGECUBE, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGECUBE(GLSLLexer.IIMAGECUBE, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGECUBE(GLSLLexer.UIMAGECUBE, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGEBUFFER(GLSLLexer.IMAGEBUFFER, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGEBUFFER(GLSLLexer.IIMAGEBUFFER, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGEBUFFER(GLSLLexer.UIMAGEBUFFER, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE1D(GLSLLexer.IMAGE1D, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE1D(GLSLLexer.IIMAGE1D, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE1D(GLSLLexer.UIMAGE1D, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE1DARRAY(GLSLLexer.IMAGE1DARRAY, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE1DARRAY(GLSLLexer.IIMAGE1DARRAY, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE1DARRAY(GLSLLexer.UIMAGE1DARRAY, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE2DRECT(GLSLLexer.IMAGE2DRECT, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE2DRECT(GLSLLexer.IIMAGE2DRECT, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE2DRECT(GLSLLexer.UIMAGE2DRECT, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE2DARRAY(GLSLLexer.IMAGE2DARRAY, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE2DARRAY(GLSLLexer.IIMAGE2DARRAY, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE2DARRAY(GLSLLexer.UIMAGE2DARRAY, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGECUBEARRAY(GLSLLexer.IMAGECUBEARRAY, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGECUBEARRAY(GLSLLexer.IIMAGECUBEARRAY, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGECUBEARRAY(GLSLLexer.UIMAGECUBEARRAY, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE2DMS(GLSLLexer.IMAGE2DMS, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE2DMS(GLSLLexer.IIMAGE2DMS, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE2DMS(GLSLLexer.UIMAGE2DMS, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  IMAGE2DMSARRAY(GLSLLexer.IMAGE2DMSARRAY, TypeKind.IMAGE, NumberType.FLOATING_POINT),
  IIMAGE2DMSARRAY(GLSLLexer.IIMAGE2DMSARRAY, TypeKind.IMAGE, NumberType.SIGNED_INTEGER),
  UIMAGE2DMSARRAY(GLSLLexer.UIMAGE2DMSARRAY, TypeKind.IMAGE, NumberType.UNSIGNED_INTEGER),
  ACCELERATION_STRUCTURE(GLSLLexer.ACCELERATION_STRUCTURE_EXT, TypeKind.ACCELERATION_STRUCTURE);

  public enum TypeKind {
    VOID,
    ATOMIC_UINT,
    SAMPLER,
    IMAGE,
    ACCELERATION_STRUCTURE;
  }

  public final int tokenType;
  public final TypeKind kind;
  public final NumberType valueFormat; // only for number-related types

  private FixedType(int tokenType, TypeKind kind, NumberType valueFormat) {
    this.tokenType = tokenType;
    this.kind = kind;
    this.valueFormat = valueFormat;
  }

  private FixedType(int tokenType, TypeKind kind) {
    this(tokenType, kind, null);
  }

  @Override
  public int getTokenType() {
    return tokenType;
  }

  public static FixedType fromToken(Token token) {
    return TypeUtil.enumFromToken(FixedType.values(), token);
  }
}
