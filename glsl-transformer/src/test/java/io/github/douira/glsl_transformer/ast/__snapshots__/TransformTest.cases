§uniformRemoval normal:
layout(std140) uniform UniformBlock {
	vec4 foo;
	vec3 bar;
	float zag, zim;
	float roo, raa;
	ivec3 gan;
};
uniform OtherBlock { vec4 foo; };
uniform vec4 foo;
uniform vec4 rau;
uniform float zim;
uniform vec3 bar, baz = 4;
uniform float roo, raa;
uniform bool gan;
layout(location = 0) uniform float zag;
void runStuff(vec3 foo) {
	foo = vec3(1);
}
void main() {
	runStuff(foo.xyz);
	runStuff(bar);
	int foo;
	foo = zag;
}
===
layout(std140) uniform UniformBlock {
	vec4 foo;
	vec3 bar;
	float zag, zim;
	float roo, raa;
	ivec3 gan;
};
uniform OtherBlock { vec4 foo; };
uniform vec4 rau;
uniform vec3 baz = 4;
void runStuff(vec3 foo) {
	foo = vec3(1);
}
void main() {
	runStuff(foo.xyz);
	runStuff(bar);
	int foo;
	foo = zag;
}

§functionRenameWrap normal:
void main() {
	a = shadow2D(a, b);
	a = shadow2DLod(a, b, c);
}
===
void main() {
	a = vec4(texture(a, b));
	a = vec4(textureLod(a, b, c));
}

§emptyExternalDeclarationRemoval function:
void main() {
};
===
void main() {
}

§emptyExternalDeclarationRemoval alone:
;
===

§outDeclarationModify normal:
out float foo;
in float foo;
in int bar;
in float gam;
in bool boo;
void main() {
	zou = 4;
	void main();
}
===
out float gam;
out bool boo;
out int bar;
out float foo;
in float foo;
in int bar;
in float gam;
in bool boo;
void main() {
	gam = 0.0f;
	boo = false;
	bar = 0;
	zou = 4;
	void main();
}

§sidecarInjection texture@tex1,tex3:
uniform sampler3D tex1;
uniform sampler2D tex2;
uniform sampler3D tex3;
void main() {
  color = texture(tex1, coord3);
  color = texture(tex2, coord2);
  color = texture(tex3, coord3);
}
===
uniform sampler3D tex1;
uniform sampler2D tex2;
uniform sampler3D tex3;
vec4 redirected_texture(sampler3D tracked, int sidecar, vec3 coord) {
  if (tracked == 1) {
    return vec4(1.0);
  } else if (tracked == 2) {
    return vec4(2.0);
  } else {
    return texture(tracked, coord);
  }
}
void main() {
  color = redirected_texture(tex1, 1, coord3);
  color = texture(tex2, coord2);
  color = redirected_texture(tex3, 2, coord3);
}

§sidecarInjection texture@tex2:
uniform sampler3D tex1;
uniform isampler1D tex2;

void main() {
  color = texture(tex1, coord1);
  color = texture(tex2, coord2);
}
===
uniform sampler3D tex1;
uniform isampler1D tex2;
float redirected_texture(isampler1D tracked, int sidecar, float coord) {
  if (tracked == 1) {
    return 1.0
  } else {
    return texture(tracked, coord);
  }
}
void main() {
  color = texture(tex1, coord1);
  color = redirected_texture(tex2, 1, coord2);
}

§sidecarInjection texture@tex2:
uniform sampler3D tex1;
uniform isampler1D tex2;

int foo(isampler1D tex, float coord) {
  isampler1D bar;
  bar = tex;
  return texture(bar, coord);
}

float foo(sampler3D tex, vec3 coord) {
  sampler3D bar;
  bar = tex;
  return texture(bar, coord);
}

void main() {
  color = foo(tex1, coord1);
  color = foo(tex2, coord2);
}
===
uniform sampler3D tex1;
uniform isampler1D tex2;
int foo(isampler1D tex, float coord) {
  isampler1D bar;
  bar = tex;
  return texture(bar, coord);
}
float foo(sampler3D tex, vec3 coord) {
  sampler3D bar;
  bar = tex;
  return texture(bar, coord);
}
float redirected_texture(isampler1D tracked, int sidecar, float coord) {
  if (tracked == 1) {
    return 1.0
  } else {
    return texture(tracked, coord);
  }
}
void main() {
  color = foo(tex1, 1, coord1);
  color = foo(tex2, 2, coord2);
}

§
